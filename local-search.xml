<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git的配置</title>
    <link href="/2021/07/29/Git%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/29/Git%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>git是一个优秀的版本控制软件，自动记录每个版本的变化。方便版本的回退和团队的协作，至少我现在认识到的优点就只有这些。现在最有感受的系统还是分支系统，可以让团队高效的协作。</p><h2 id="git的配置"><a href="#git的配置" class="headerlink" title="git的配置"></a>git的配置</h2><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>git的下载就是普通的下载，安装的时候可能有一些可需要注意的点就放一个书签来介绍。</p><p><a href="https://blog.csdn.net/Small_Yogurt/article/details/104966939">https://blog.csdn.net/Small_Yogurt/article/details/104966939</a></p><h3 id="git的SSH-Key配置"><a href="#git的SSH-Key配置" class="headerlink" title="git的SSH Key配置"></a>git的SSH Key配置</h3><p>git在配置了SSH Key之后可以不用使用密码，可以直接拉取和推送远程仓库。下面从配置流程开始介绍如可配置SSH Key。</p><p>1、首先配置git的用户名和邮箱，这个是识别上传的用户是谁的标志。其实对之后没什么用，但是必须要做，就先写在这里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Git">git  config  --global  user.name  &quot;user name&quot;<br>git  config  --global  user.email  &quot;your email&quot;<br><br></code></pre></td></tr></table></figure><p>2、之后就到了真正配置SSH Key的时候，命令如下。具体的图片如下图所示。一般简单处理这个SSH Key就不设密码处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">ssh-keygen -t rsa -C &quot;your email&quot;<br></code></pre></td></tr></table></figure><p><img src="/img/git/git1.png"></p><p>3、之后如果密匙文件放在了默认的位置，利用下面的命令来查看密匙的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Git">cat ~/.ssh/id_rsa.pub<br><br></code></pre></td></tr></table></figure><p><img src="/img/git/git2.png"></p><p>4、之后相应的远程库把对应的SSH Key输入进去。两者应该就可以不输入密码就可以进行拉取和推送了。</p><p><img src="/img/git/git3.png"></p><p>5、最后可以利用这里的命令来检验是否可以连接到远程长裤。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><img src="/img/git/git4.png"></p><h2 id="Sourcetree的安装和使用"><a href="#Sourcetree的安装和使用" class="headerlink" title="Sourcetree的安装和使用"></a>Sourcetree的安装和使用</h2><p>Sourcetree是一款git的GUI操作界面，可以让一些要输入命令行的操作最后得以使用图形界面完成，但是虽然简单直观适合初学者使用，但是复杂操作他可能就心有余而力不足。所以后续的命令行还是要继续学习深化。</p><h3 id="Sourcetree的安装"><a href="#Sourcetree的安装" class="headerlink" title="Sourcetree的安装"></a>Sourcetree的安装</h3><p>这个是安装第一个界面，因为我有科学上网的能力所以可以直接选右边注册一个账号来直接进行注册账号，然后就可以直接进行下一步了。</p><p><img src="/img/git/git5.png"></p><p>然后用按下面这个图片的配置了勾选选项。</p><p><img src="/img/git/git6.png"></p><p>这里会写出本电脑的仓库信息是自动填写的，一般来所是不用管的。</p><p><img src="/img/git/git7.png"></p><p>之后会弹出一个窗口问你配不配置SSHkey，因为我们在上一步git的配置中已经配置过了就不管他。直接一个“否”。</p><p><img src="/img/git/git8.png"></p><p>最后到这里就配置成功了，可喜可贺。</p><p><img src="/img/git/git9.png"></p><h3 id="Sourcetree的配置"><a href="#Sourcetree的配置" class="headerlink" title="Sourcetree的配置"></a>Sourcetree的配置</h3><p>在最开始使用之前，有几项内容还需要配置。首先打开配置中的选项。</p><p><img src="/img/git/git10.png"></p><p>打开后的界面如下图所示，主要有如下几个点需要注意的地方：</p><ul><li><p>默认用户信息：已经是默认填的，一般不用管。</p></li><li><p>SSH客户端配置：这里要设置一下，把SSH客户端选为OpenSSH，他会自动识别key的地址。</p></li><li><p>repo settings：这里的目录是库默认的目录，可以不填，但是填了之后会很方便。以后大家爬取库的时候可以直接从这里爬取。</p></li></ul><p><img src="/img/git/git11.png"></p><h2 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h2><p>这里结合git的命令行和Sourcetree的图形化界面来进行项目的拉取，推送等相关操作。</p><h3 id="提交代码规范"><a href="#提交代码规范" class="headerlink" title="提交代码规范"></a>提交代码规范</h3><p>提交代码示例：注意！！！抽取change log的⼯具要求冒号后⾯必须有空格，⽽且不能是全⻆的</p><ul><li><p>feat: 1845 外呼⼦站坐席挂机时，需要将数据暂存</p></li><li><p>fix: 7789 【技能管理】新建技能，溢出队列下拉框中其他队列只能显示前10条</p></li><li><p>docs: 增加代码注释</p></li><li><p>style: 调整样式</p></li><li><p>refactor: 重构某功能</p></li><li><p>test: 测试功能</p></li><li><p>chore: 构建过程或辅助⼯具的变动</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的配置</title>
    <link href="/2021/07/29/Hexo%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/29/Hexo%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。利用这个框架和github pages就可以快速搭建外网可以访问的博客。下面首先来说如何配置。</p><h2 id="github-pages的申请"><a href="#github-pages的申请" class="headerlink" title="github pages的申请"></a>github pages的申请</h2><p>github pages可以让每个用户不用配置服务器就可以创建一个互联网可以访问的页面。但是他的申请本身可能还有一些需要注意。</p><p>首先申请github pages就是申请一个github库，申请一个你的用户名.github.io为名字的库。如果名字不是这个可能会报错，实际上我也没有试过错。</p><p>接下来就是一些踩过坑的地方了，首先库的类型要设为Public，Private的github pages功能要收费的。其次要勾选Add a README file不然从本地爬库的时候会有一些问题。</p><p><img src="/img/hexo-1.png"></p><p>显示成为这样，你的github pages申请应该就大体完成了。</p><p><img src="/img/hexo-2.png"></p><h2 id="Hexo的初始化"><a href="#Hexo的初始化" class="headerlink" title="Hexo的初始化"></a>Hexo的初始化</h2><p>Hexo前面的node和npm安装就不说了，我个人已经刻在了DNA之中。然后就是利用npm现在全局环境下安装Hexo。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm install -g hexo<br></code></pre></td></tr></table></figure><p>之后利用cmd或者任何终端打开一个你想要放置博客源文件的文件夹，并输入如下命令来操做。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">hexo init <span class="hljs-comment">//初始化hexo项目，把文件加载到文件夹中</span><br>hexo g <span class="hljs-comment">// 生成编译后的文件，可以直接推送到相应的github上，之后详细介绍</span><br>hexo s <span class="hljs-comment">// 启动服务,可以本地预览你的博客</span><br><br></code></pre></td></tr></table></figure><h2 id="Hexo的主题"><a href="#Hexo的主题" class="headerlink" title="Hexo的主题"></a>Hexo的主题</h2><p>能换主题的时候没人想用默认主题，所以这里就来介绍怎么更换Hexo的主题。这里用的主题是fluid，可能和其他主题的安装方式不同，不可以直接套用。</p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml </a>内容复制过去。</p><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>。直接写关于页的内容。<br>修改后的文件示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">---<br>title: about<br><span class="hljs-attr">date</span>: <span class="hljs-number">2020</span>-<span class="hljs-number">02</span>-<span class="hljs-number">23</span> <span class="hljs-number">19</span>:<span class="hljs-number">20</span>:<span class="hljs-number">33</span><br><span class="hljs-attr">layout</span>: about<br>---<br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><h2 id="Hexo的部署"><a href="#Hexo的部署" class="headerlink" title="Hexo的部署"></a>Hexo的部署</h2><p>上面说了这里会把部署写一下，安装完成主题之后就是部署上去了。首先要用npm安装一个插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:liuxianan/liuxianan.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>最后载直接进行一个命令操作，你的博客就成功上传到github pages上面去了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
